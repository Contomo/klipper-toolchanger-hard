[include tool_detection.cfg]

[homing_override]
axes: xyz
gcode:
  _INITIALIZE_FROM_DETECTED_TOOL
  {% if printer.probe.last_query  %}
         RESPOND TYPE=echo MSG='Z Probe triggered, cannot home.'
  {% else %}
    SET_GCODE_OFFSET X=0.0 Y=0.0 Z=0.0
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}

    {% if home_all %}
      G90 ; absolute mode
      G28 Z
      G0 Z10 F1000
    {% endif %}

    {% if home_all or 'Y' in params or 'X' in params %}
      G28 Y
    {% endif %}

    {% if home_all or 'X' in params %}
      G90 ; absolute mode
      G0 Y{ max_y - 20 } F5000
      _SENSORLESS_HOME_X
      G91 ; relative mode
      G0 X-10 F5000
    {% endif %}

    {% if home_all or 'Z' in params %}
      {% set random_x = (range(-50, 50) | random) / 10 %}
      {% set random_y = (range(-50, 50) | random) / 10 %}

      G90 ; absolute mode
      G0 X{175.0+random_x} Y{175.0+random_y} F12000
      G28 Z
      _ADJUST_Z_HOME_FOR_TOOL_OFFSET
    {% endif %}
    _APPLY_ACTIVE_TOOL_GCODE_OFFSETS
    M400
  {% endif %}


[gcode_macro _SENSORLESS_HOME_X]
variable_home_current: 0.5
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc5160 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc5160 stepper_y'].run_current|float %}    
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={printer["gcode_macro _SENSORLESS_HOME_X"].home_current}

    # Home
    G28 X
    # Move away
    G91
    G1 X-10 F1200
    
    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

; Depending on the selected tool at the time of homing, the physical Z endstop position is offset.
; This corrects for that using current tool offset.
[gcode_macro _ADJUST_Z_HOME_FOR_TOOL_OFFSET]
gcode:
      G90 ; absolute mode
      G0 Z10 F1000
      {% set tool = printer.toolchanger.tool %}
      {% if tool %}
         {% set tool_z_offset = printer[tool].gcode_z_offset %}
         {% set probe_z_offset = printer.tool_probe_endstop.active_tool_probe_z_offset %}
         SET_KINEMATIC_POSITION Z={10.0+tool_z_offset|float+probe_z_offset|float}
      {% endif %}

[gcode_macro _APPLY_ACTIVE_TOOL_GCODE_OFFSETS]
gcode:
    ; Apply gcode offsets
    {% set tool = printer.toolchanger.tool %}
    {% if tool %}
      SET_GCODE_OFFSET X={printer[tool].gcode_x_offset} Y={printer[tool].gcode_y_offset} Z={printer[tool].gcode_z_offset}
    {% endif %}

[gcode_macro _TAP_PROBE_ACTIVATE]
description: Ensure safe temp for bed probing with tap nozzle probes
# set min to -999 and max to 999 to disable i guess
variable_temp_range: {
        'min':150, 
        'max':180,
    }
variable_last_msg: 0
variable_last_target: None
gcode:
    {% macro msg(s, prefix_color="--v-accent-base", msg_color="--p-text-color2") %}
        {% set desc = printer.configfile.settings['gcode_macro _tap_probe_activate'].description|e %}
        {% set pre  = "<span style=\"color: var(" ~ prefix_color ~ "); font-weight:bold;\" title=\"" ~ desc ~ "\">_TAP_PROBE_ACTIVATE </span>" %}
        { action_respond_info(pre ~ "<span style=\"color: var(" ~ msg_color ~ ");\" title=\"" ~ desc ~ "\">" ~ s ~ "</span>") }
    {% endmacro %}

    # prefer toolchanger over extruder ID
    {% if printer.tool_probe_endstop and printer.toolchanger %}
        {% set tn            = printer.tool_probe_endstop.active_tool_number %}
        {% set tool          = printer.toolchanger.tool_names[tn] %}
        {% set tool_extruder = printer[tool].extruder if tn >= 0 %}
    {% endif %}
    # toolhead extruder
    {% set active_extruder = printer.toolhead.extruder if not tool_extruder else tool_extruder %}

    {% set actual_t     = printer[active_extruder].temperature|int %}
    {% set target_t     = printer[active_extruder].target|int %}
    {% set max_t, min_t = temp_range['max']|int, temp_range['min']|int %}
    {% set wanted_t     = ((min_t + max_t) / 2.0)|int %}
    {% set need_adjust  = not (min_t <= target_t <= max_t) %}

    {% set m = '' %}
    {% if need_adjust %}
        {% set m = m ~ "Target not suitable for probing, adjusting: " ~ target_t ~ "°C → " ~ wanted_t ~ "°C" %}
        {% if actual_t > max_t %}
            {% set m = m ~ ' and waiting until ≤ ' ~ max_t ~ '°C.' %}
        {% elif actual_t < min_t %}
            {% set m = m ~ ' and waiting until ≥ ' ~ min_t ~ '°C.' %}
        {% else %}
            {% set m = m ~ '.' %}
        {% endif %}
    {% elif actual_t > max_t %}
        {% set m = m ~ "Current " ~ actual_t ~ "°C is high → waiting until temp ≤ " ~ max_t ~ "°C." %}
    {% elif actual_t < min_t %}
        {% set m = m ~ "Current " ~ actual_t ~ "°C is low → waiting until temp ≥ " ~ min_t ~ "°C." %}
    {% endif %}
    # 5 second hyst, just prevents console spam on repeated probes
    { msg(m) if m and printer.toolhead.estimated_print_time - last_msg >= 5 else '' }

    {% if need_adjust %}
        SET_HEATER_TEMPERATURE HEATER={active_extruder} TARGET={wanted_t}
        SET_GCODE_VARIABLE MACRO=_TAP_PROBE_ACTIVATE VARIABLE=last_target VALUE="{{'extruder': active_extruder, 'target':target_t}}"
    {% endif %}

    {% if actual_t > max_t  %}
        TEMPERATURE_WAIT SENSOR={active_extruder} MAXIMUM={max_t}
    {% elif actual_t < min_t  %}
        TEMPERATURE_WAIT SENSOR={active_extruder} MINIMUM={min_t}
    {% endif %}

[gcode_macro _TAP_PROBE_DEACTIVATE]
description: Restores what _TAP_PROBE_ACTIVATE may have changed
gcode:
    {% set last_target = printer['gcode_macro _TAP_PROBE_ACTIVATE'].get('last_target', None) %}
    {% if last_target and last_target is mapping and 'extruder' in last_target and 'target' in last_target %}
        SET_HEATER_TEMPERATURE HEATER={last_target.extruder} TARGET={last_target.target}
        SET_GCODE_VARIABLE MACRO=_TAP_PROBE_ACTIVATE VARIABLE=last_target VALUE=None
    {% endif %}
    SET_GCODE_VARIABLE MACRO=_TAP_PROBE_ACTIVATE VARIABLE=last_msg VALUE={printer.toolhead.estimated_print_time}
